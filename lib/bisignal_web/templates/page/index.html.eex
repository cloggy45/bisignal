<div class="panel panel-primary">
  <select id="distance" onchange="newApiCall()" class="controls">
    <option value="1000">Rides within 1km</option>
    <option value="3000">Rides within 3km</option>
    <option value="5000">Rides within 5km</option>
    <option value="7000">Rides within 7km</option>
    <option value="10000">Rides within 10km</option>
    <option value="15000">Rides within 15km</option>
    <option value="20000">Rides within 20km</option>
    <option value="50000">Rides within 50km</option>
    <option value="100000">Rides within 100km</option>
  </select>

  <select name="dist" id="participantDistance" onchange="getMarkers()" class="controls">
    <option value="1000">1km</option>
    <option value="3000">3km</option>
    <option value="5000">5km</option>
    <option value="7000">7km</option>
    <option value="10000">10km</option>
    <option value="15000">15km</option>
    <option value="20000">20km</option>
    <option value="50000">50km</option>
    <option value="100000">100km</option>
    <option value="200000">200km</option>
    <option value="500000">500km</option>
    <option value="750000">750km</option>
    <option value="1000000">1000km</option>
  </select>

  <select id="time" onchange="getMarkers()" class="controls">
    <option value="1">Now</option>
    <option value="3">Last 3 minutes</option>
    <option value="5">Last 5 minutes</option>
    <option value="7">Last 7 minutes</option>
    <option value="15">Last 15 minutes</option>
    <option value="30">Last 30 minutes</option>
    <option value="60">Last 1 hour</option>
    <option value="90">Last 1 hour 30</option>
    <option value="120">Last 2 hours</option>
    <option value="180">Last 3 hours</option>
  </select>

  <div id="mapholder" style="height:30em;"></div>
  <div id="error"></div>
</div>

<script>
    //HERE ONLY FOR TESTING
var INTERVAL = 2000;
var currentMarkers = {};
var requestArray = [];
var renderArray = [];
var routeData;
var directionsService;
var distanceInput = document.getElementById('distance');
var partDistInput = document.getElementById('participantDistance');
var timeInput = document.getElementById('time');
var mapHolder = document.getElementById('mapholder')
var errorBox = document.getElementById('error')
var bounds;
var icons;
var map;
var pos = {
    lat: 54.488389,
    lng: -6.042480
  }


function initMap() {
  getLocation();
  map = new google.maps.Map(mapHolder, {
      mapTypeControl: false,
      zoom: 5
  });

  map.controls[google.maps.ControlPosition.TOP_CENTER].push(distanceInput);
  map.controls[google.maps.ControlPosition.TOP_CENTER].push(partDistInput);
  map.controls[google.maps.ControlPosition.TOP_CENTER].push(timeInput);

  directionsService = new google.maps.DirectionsService();
}

function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(mapSuccess, mapError);
  } else {
    mapError();
  }
}

function mapSuccess(position) {
  pos = {
    lat: position.coords.latitude,
    lng: position.coords.longitude
  };
  newApiCall();
}

function mapError() {
  distanceInput.style.display = "none"
  mapHolder.style.display = "none"
  errorBox.style.display = ""
  errorBox.innerHTML = "Your location is required to use BiSignal"
}

function newApiCall() {
  $.get('/api/routes_within/' + distanceInput.value + '/of/' + pos.lng + '/' + pos.lat).then(function(data) {
    routeData = data;
    buildRequestArrayAndBounds();
    resetRenderArray();
    processRequests();
    listenForIdleAndCenter();
    getMarkers();
  }).fail(function() {
    console.log("Uh oh");
  })
}

function buildRequestArrayAndBounds() {
  requestArray = []
  bounds = new google.maps.LatLngBounds();
  for (var i = 0; i < routeData.length; i++) {
    currentRoute = routeData[i];
    requestArray[i] = {
      origin: new google.maps.LatLng(currentRoute.start.coordinates[1], 
                                     currentRoute.start.coordinates[0]),
      destination: new google.maps.LatLng(currentRoute.end.coordinates[1], 
                                          currentRoute.end.coordinates[0]),
      travelMode: google.maps.TravelMode.BICYCLING
    }
    bounds.extend(requestArray[i].origin);
    bounds.extend(requestArray[i].destination);
  }
}

function resetRenderArray() {
  if(renderArray.length > 0){
    for(var j=0; j < renderArray.length; j++){
      if (renderArray[j] != null) {
        renderArray[j].setMap(null);
        renderArray[j] = null;
      }
    }
  }
  renderArray = []
}

function listenForIdleAndCenter() {
    google.maps.event.addListener(map, 'idle', function() {
    if (bounds) {
      map.fitBounds(bounds)
    }
    google.maps.event.clearListeners(map, 'idle')
  })
}

function processRequests(){
  var current = 0;
  
  resetRenderArray();
  submitRequest();

  function submitRequest(){
    directionsService.route(requestArray[current], directionResults);
  }

  function directionResults(result, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      renderArray[current] = new google.maps.DirectionsRenderer();
      renderArray[current].setMap(map);
      renderArray[current].setDirections(result);
    }
    nextRequest();
  }

  function nextRequest(){
    current++;
    if(current >= requestArray.length){
      return;
    }
    submitRequest();
  }
}

function getMarkers() {
  $.get('/api/participants/' + partDistInput.value + '/meters_from/' + pos.lng + '/' + pos.lat + '/in_last/' + timeInput.value + '/minutes').then(function(data) {
    resetCurrentMarkers();
    for (var i = 0; i < data.length; i++) {
      if(currentMarkers.hasOwnProperty(data[i].user_id)) {
        currentMarkers[data[i].user_id].setPosition(new google.maps.LatLng(data[i].geo_json.coordinates[1], data[i].geo_json.coordinates[0]))
      } else {
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(data[i].geo_json.coordinates[1], data[i].geo_json.coordinates[0]),
          title: "Participant " + data[i].user_id + " on Route " + data[i].route_id,
          map: map,
          icon: {url: 'http://maps.google.com/mapfiles/kml/shapes/cycling.png', scaledSize: new google.maps.Size(25, 25)}
        });
        currentMarkers[data[i].user_id] = marker;
      }
    }
    window.setTimeout(getMarkers, INTERVAL);
  });
}

function resetCurrentMarkers() {
  $.each(currentMarkers, function(index, item) {
    item.setPosition(null)
  })
}

</script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="<%= static_path(@conn, "/js/multiroute.js") %>"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAZb6It08HrypHnxdYwZenAUtnlsitIOes&libraries=places&callback=initMap"
    async defer></script>



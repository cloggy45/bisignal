<div class="panel panel-primary" id="mapAndOptions">
  <div class="panel-heading">
    <details>
      <summary>Instructions</summary>
      <h3>How to Use</h3>
      <p>First, press <i>Detect Location</i> to center the map. </p>
      <p><strong>Note:</strong> to manually select your location (the blue pointer on the map), double click/tap on a location.</p>
      <p>To see the Rides organised (Red A to Green B pointers on the map) which <strong>Start or End</strong> near you, select an option from <i>Show All Routes Within</i>.</p>
      <p>If you want to see the locations of Riders (green pointers on the map), configure the options under <i>Show All Riders Within</i> and <i>Rider's Last Location Update</i>. The distances selected are relative to the location of the blue pointer</p>
    </details>
    <h5 id="locationMessage" style="display:none;">Location sharing disabled or not-available. Double click/tap the map to choose your location. More Info.</h5>
  </div>
  <input type="button" id="center" onclick="centerMap()" value="Detect Location" class="controls centerButton btn"/>
  <div id="mapholder" style="height:30em;"></div>
  <div class="panel-footer" id="options">
    <div class="row text-center">
      <div class="col-md-4">
        <label for="distance">Show All Routes Within</label>
        <select id="distance" onchange="getRoutes()" class="controls dropdown-selection btn btn-default btn-block">
          <option value="1000">1km</option>
          <option value="3000">3km</option>
          <option value="5000">5km</option>
          <option value="7000">7km</option>
          <option value="10000">10km</option>
          <option value="15000">15km</option>
          <option value="20000">20km</option>
          <option value="50000">50km</option>
          <option value="100000">100km</option>
          <option value="200000">200km</option>
          <option value="500000">500km</option>
          <option value="750000">750km</option>
          <option value="1000000">1000km</option>
        </select>  
      </div>
      <div class="col-md-4">
        <label for="participantDistance">Show All Riders Within</label>
        <select name="dist" id="participantDistance" onchange="getMarkers()" class="controls dropdown-selection btn btn-default btn-block">
          <option value="1000">1km</option>
          <option value="3000">3km</option>
          <option value="5000">5km</option>
          <option value="7000">7km</option>
          <option value="10000">10km</option>
          <option value="15000">15km</option>
          <option value="20000">20km</option>
          <option value="50000">50km</option>
          <option value="100000">100km</option>
          <option value="200000">200km</option>
          <option value="500000">500km</option>
          <option value="750000">750km</option>
          <option value="1000000">1000km</option>
        </select>
      </div>
      <div class="col-md-4">
        <label for="time">Rider's Last Location Update</label>
        <select id="time" onchange="getMarkers()" class="controls dropdown-selection btn btn-default btn-block">
          <option value="1">Now</option>
          <option value="3">3 minutes</option>
          <option value="5">5 minutes</option>
          <option value="7">7 minutes</option>
          <option value="15">15 minutes</option>
          <option value="30">30 minutes</option>
          <option value="60">1 hour</option>
          <option value="90">1 hour 30</option>
          <option value="120">2 hours</option>
          <option value="180">3 hours</option>
          <option value="360">6 hours</option>
          <option value="720">12 hours</option>
          <option value="1440">24 hours</option>
          <option value="2880">2 days</option>
          <option value="10080">7 days</option>
        </select>
      </div>
    </div>
  </div>
</div>

<script>
    //HERE ONLY FOR TESTING
var INTERVAL = 2000;
var currentMarkers = {};
var requestArray = [];
var renderArray = [];
var routeData;
var directionsService;
var distanceInput = document.getElementById('distance');
var partDistInput = document.getElementById('participantDistance');
var timeInput = document.getElementById('time');
var mapHolder = document.getElementById('mapholder')
var errorBox = document.getElementById('error')
var centerButton = document.getElementById('center')
var locationMsg = document.getElementById('locationMessage')
var bounds;
var map;
var pos = {
  lat: 54.488389,
  lng: -6.042480
}
var userMarker;
var refresh = false;


function initMap() {
  map = new google.maps.Map(mapHolder, {
      mapTypeControl: false,
      center: pos,
      zoom: 8,
      gestureHandling: 'greedy',
      disableDoubleClickZoom: true
  });

  map.controls[google.maps.ControlPosition.TOP_LEFT].push(centerButton);
  directionsService = new google.maps.DirectionsService();

  google.maps.event.addListener(map, "dblclick", function (event) {
    pos = {
      lat: event.latLng.lat(), 
      lng: event.latLng.lng()
    }
    if (userMarker == null) {
      userMarker = new google.maps.Marker({
        position: new google.maps.LatLng(pos.lat, pos.lng),
        title: 'Your Location',
        map: map,
        icon: {url: 'https://maps.google.com/mapfiles/kml/paddle/blu-blank.png', scaledSize: new google.maps.Size(30, 30)}
      }); 
    } else {
      userMarker.setPosition(new google.maps.LatLng(pos.lat, pos.lng))
    }
  });
  refresh = window.setInterval(getMarkers, INTERVAL);
}

//Checks for the presence/availability of HTML5 Geolocation
//the mapSuccess callback triggers when Geolocation is available
//and the User allows location sharing. The mapError will trigger
//if they choose not to share or the device/browser isn't compatible
function getLocation() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(mapSuccess, mapError);
  } else {
    mapError();
  }
}

function mapSuccess(position) {
  pos = {
    lat: position.coords.latitude,
    lng: position.coords.longitude
  };
  if (userMarker == null) {
    userMarker = new google.maps.Marker({
      position: new google.maps.LatLng(pos.lat, pos.lng),
      title: 'Your Location',
      map: map,
      icon: {url: 'https://maps.google.com/mapfiles/kml/paddle/blu-blank.png', scaledSize: new google.maps.Size(30, 30)}
    }); 
  } else {
    userMarker.setPosition(new google.maps.LatLng(pos.lat, pos.lng))
  }
  getMarkers();
  map.panTo(pos)
}

function mapError() {
  //document.getElementById('mapAndOptions').style.display = "none"
  centerButton.style.display = "none"
  locationMsg.style.display = ""
}

//API call to get all routes within a given distance. It produces multiple DisplayRenderer
//objects, one for each route which is received from the API call. These routes are then
//converted to PositionRequests for Google maps. When a previous API call has been made,
//the existing DisplayRenderers are reset (i.e. their routes are removed) and the new
//results are rendered
function getRoutes() {
  $.get(formatRouteApiCall(distanceInput.value, pos.lng, pos.lat)).then(function(data) {
    if (data != []) {
      routeData = data;
      buildRequestArrayAndBounds()
      resetRenderArray();
      processRequests();
    } else {
      resetRenderArray();
    }
    //listenForIdleAndCenter();
  }).fail(function() {
    console.log("Uh oh");
  })
}

//This makes an API call to get all participants within a distance of a location, whose last
//update was within a given time. The marker positions are first reset, then we iterate through the
//participants 
function getMarkers() {
  $.get(formatParticipantApiCall(partDistInput.value, pos.lng, pos.lat, timeInput.value)).then(function(data) {
    resetMarkerPosition();
    for (var i = 0; i < data.length; i++) {
      current = data[i]
      user_id = current.user_id
      if(currentMarkers.hasOwnProperty(user_id)) {
        existingMarker = currentMarkers[user_id]
        existingMarker.setPosition(new google.maps.LatLng(current.geo_json.coordinates[1], current.geo_json.coordinates[0]))
        existingMarker._circle.radius = current.loc_accuracy
        existingMarker.title = participantTitle(current)
      } else {
        var marker = new google.maps.Marker({
          position: new google.maps.LatLng(current.geo_json.coordinates[1], current.geo_json.coordinates[0]),
          title: participantTitle(current),
          map: map,
          icon: {url: 'https://maps.google.com/mapfiles/kml/paddle/grn-blank.png', scaledSize: new google.maps.Size(30, 30)}
        });
        //A circle representing the GPS accuracy is added
        //and the circle is attached to the marker as a 
        //property for future updates
        addCircleToMarker(marker, current.loc_accuracy)
        currentMarkers[current.user_id] = marker;
      }
    }
  });
}

//Builds PositionRequest objects for use with Google's Navigation API
//and simultaneously populates the map bounds based on all the individual
//locations i.e. start and end Positions, from each ride which is used
//to set the map's zoom level after receiving all routes are rendered
//on the map
function buildRequestArrayAndBounds() {
  requestArray = []
  bounds = new google.maps.LatLngBounds();
  for (var i = 0; i < routeData.length; i++) {
    currentRoute = routeData[i];
    requestArray[i] = {
      origin: new google.maps.LatLng(currentRoute.start.coordinates[1], 
                                     currentRoute.start.coordinates[0]),
      destination: new google.maps.LatLng(currentRoute.end.coordinates[1], 
                                          currentRoute.end.coordinates[0]),
      travelMode: google.maps.TravelMode.BICYCLING
    }
    bounds.extend(requestArray[i].origin);
    bounds.extend(requestArray[i].destination);
  }
}



// Core Request processing -- directionsResults is a callback function 
//which populates the map with routes as the results are received. 
function processRequests(){
  var current = 0;
  submitRequest();

  //Submits the first request from the requestArray. When a result if received
  //the directionResults callback is triggered
  function submitRequest(){
    directionsService.route(requestArray[current], directionResults);
  }

  //Callback which receives a result and a status. If the Status
  //is 'OK', a new DirectionsRenderer is created, has its map set
  //as the main map, and the result param is set as the directions
  //to display on the map
  function directionResults(result, status) {
    if (status == google.maps.DirectionsStatus.OK) {
      renderArray[current] = new google.maps.DirectionsRenderer();
      renderArray[current].setMap(map);
      renderArray[current].setDirections(result);
    }
    nextRequest();
  }

  //increases the count and checks if the end of the requestArray
  //has been reached. If it has been reached, the function returns,
  //otherwise the next request is submitted and the cycle repeats
  function nextRequest(){
    current++;
    if(current >= requestArray.length){
      map.setCenter(pos)
      return;
    }
    submitRequest();
  }
}

//Helpers for formatting API calls or other small functions
function addCircleToMarker(marker, radius) {
  var thisCircle = new google.maps.Circle({
      map: map,
      radius: radius,    // 10 miles in metres
      fillColor: '#000080'
    });
  thisCircle.bindTo('center', marker, 'position');
  marker._circle = thisCircle
}

function resetRenderArray() {
  if(renderArray.length > 0){
    for(var j = 0; j < renderArray.length; j++){
      if (renderArray[j] != null) {
        renderArray[j].setMap(null);
        renderArray[j] = null;
      }
    }
  }
  renderArray = []
}

function resetMarkerPosition() {
  $.each(currentMarkers, function(index, item) {
    console.log("wot")
    item.setPosition(null)
  })
}

function centerMap() {
  getLocation();
}

function formatRouteApiCall(distance, lng, lat) {
  return '/api/routes_within/' + distance + '/of/' + lng + '/' + lat
}

function formatParticipantApiCall(distance, lng, lat, time) {
  return '/api/participants/' + distance + '/meters_from/' + lng + '/' + lat + '/in_last/' + time + '/minutes'
}

function participantTitle(participant) {
  return "Participant " + participant.user_id + " on Route " + participant.route_id + " accurate to " + participant.loc_accuracy + " meters\nSeen " + participant.updated_at;
}
</script>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAZb6It08HrypHnxdYwZenAUtnlsitIOes&libraries=places&callback=initMap"
    async defer></script>


